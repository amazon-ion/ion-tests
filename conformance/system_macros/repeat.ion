// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

(ion_1_1 "repeat can be invoked"
         (each "in text with an unqualified macro name"
               (text ''' (:repeat 1 1) ''')
               "in text with an unqualified macro address"
               (text ''' (:4 1 1) ''')
               "in text with a qualified macro name"
               (text ''' (:$ion::repeat 1 1) ''')
               "in text with a qualified macro address"
               (text ''' (:$ion::4 1 1) ''')
               "in binary with a system macro address"
               (binary "EF 04 01 61 01 61 01")
               "in binary with a user macro address"
               (binary "04 01 61 01 61 01")
               (produces 1)))

(ion_1_1 "repeat can produce"
         (then "a single expression"
               (then "0 times" (text "(:repeat 0 0)") (produces))
               (then "1 times" (text "(:repeat 1 0)") (produces 0))
               (then "2 times" (text "(:repeat 2 0)") (produces 0 0))
               (then "3 times" (text "(:repeat 3 0)") (produces 0 0 0))
               (then "4 times" (text "(:repeat 4 0)") (produces 0 0 0 0))
               (then "5 times" (text "(:repeat 5 0)") (produces 0 0 0 0 0)))
         (then "an empty expression group"
               (each (text "(:repeat 0 (::))")
                     (text "(:repeat 1 (::))")
                     (text "(:repeat 2 (::))")
                     (text "(:repeat 3 (::))")
                     (text "(:repeat 4 (::))")
                     (produces /*nothing*/ )))
         (then "an expression that produces no values"
               (each (text "(:repeat 0 (:none))")
                     (text "(:repeat 1 (:none))")
                     (text "(:repeat 2 (:none))")
                     (text "(:repeat 3 (:none))")
                     (text "(:repeat 4 (:none))")
                     (produces /*nothing*/ )))
         (then "an expression group with multiple values"
               (then "0 times" (text "(:repeat 0 (:: 0 1))") (produces))
               (then "1 times" (text "(:repeat 1 (:: 0 1))") (produces 0 1))
               (then "2 times" (text "(:repeat 2 (:: 0 1))") (produces 0 1 0 1))
               (then "3 times" (text "(:repeat 3 (:: 0 1))") (produces 0 1 0 1 0 1))
               (then "4 times" (text "(:repeat 4 (:: 0 1))") (produces 0 1 0 1 0 1 0 1)))
         (then "an expression that produces multiple values"
               (then "0 times" (text "(:repeat 0 (:values 0 1))") (produces))
               (then "1 times" (text "(:repeat 1 (:values 0 1))") (produces 0 1))
               (then "2 times" (text "(:repeat 2 (:values 0 1))") (produces 0 1 0 1))
               (then "3 times" (text "(:repeat 3 (:values 0 1))") (produces 0 1 0 1 0 1))
               (then "4 times" (text "(:repeat 4 (:values 0 1))") (produces 0 1 0 1 0 1 0 1))) )

(ion_1_1 "repeat will ignore any annotations on the number of repetitions"
         (then (text "(:repeat a::1 0)") (produces 0))
         (then (text "(:repeat b::2 0)") (produces 0 0))
         (then (text "(:repeat c::3 0)") (produces 0 0 0))
         (then (text "(:repeat d::4 0)") (produces 0 0 0 0))
         (then (text "(:repeat e::5 0)") (produces 0 0 0 0 0)))

(ion_1_1 "repeat signals an error when"
         (each "the number of repeats is not an integer"
               (text "(:repeat 1d0 0)")
               (text "(:repeat 1e1 0)")
               (text "(:repeat false 0)")
               "the number of repeats is multiple values"
               (text "(:repeat (:: 1 2) 0)")
               "the number of repeats an expression the produces multiple values"
               (text "(:repeat (:values 1 2) 0)")
               "the number of repeats is negative"
               (text "(:repeat -1 0)")
               (signals "invalid argument")))
