// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

(ion_1_1 "make_struct can be invoked"
         (each "in text with an unqualified macro name"
               (text " (:make_struct (::)) ")
               "in text with an unqualified macro address"
               (text " (:17 (::)) ")
               "in text with a qualified macro name"
               (text " (:$ion::make_struct (::)) ")
               "in text using qualified system macro address 10"
               (text " (:$ion::17 (::)) ")
               "in binary using system macro address 10"
               (binary "EF 11 00")
               "in binary with a user macro address"
               (binary "11 00")
               (produces {})))

(ion_1_1 "make_struct creates a single, unannotated struct from"
         (each "0 values"
               (text "(:make_struct)")
               "empty structs"
               (text "(:make_struct {})")
               (text "(:make_struct {} {} {})")
               (produces {}))
         (each "one struct"
               (text "(:make_struct {a:1, b:2, c:3})")
               "multiple structs"
               (text "(:make_struct {a:1, b:2} {c:3})")
               (text "(:make_struct {} {a:1} {} {b:2} {} {c:3})")
               "other make_struct invocations"
               (text "(:make_struct (:make_struct {a:1} {b:2} {c:3}))")
               (text "(:make_struct (:make_struct {} {a:1} {} {b:2} {} {c:3}))")
               "make_field invocations"
               (text "(:make_struct (:make_field a 1) (:make_field b 2) (:make_field c 3))")
               (text "(:make_struct (:: (:make_field a 1) (:make_field b 2) (:make_field c 3)))")
               "annotated struct values"
               // Argument annotations are silently dropped.
               (text "(:make_struct a::{} b::{a:1} c::{b:2} d::{c:3})")
               (text "(:make_struct a::{a:1} b::{b:2} c::{c:3} d::{})")
               (produces {a:1, b:2, c:3}))
         (then "structs with repeated fields"
               (text "(:make_struct {a:1} {a:1})")
               (produces {a:1, a:1}))
         (then "structs with repeated field names"
               (text "(:make_struct {a:2} {a:3})")
               (produces {a:2, a:3})))

(ion_1_1 "the argument cannot be"
         (each "null"
               (text "(:make_struct null)")
               (text "(:make_struct {a:1} null {b:2})")
               "null.struct"
               (text "(:make_struct null.struct)")
               (text "(:make_struct {a:1} null.struct {b:2})")
               "a non-struct value"
               (text "(:make_struct {{ '''abc''' }})")
               (text "(:make_struct {a:1} {{ '''abc''' }} {b:2})")
               (text "(:make_struct 123)")
               (text "(:make_struct {a:1} 123 {b:2} )")
               (text "(:make_struct (a 1) )")
               (text "(:make_struct [] )")
               (text "(:make_struct () )")
               (text "(:make_struct {a:1} (a 1) {b:2} )")
               (text "(:make_struct {a:1} [] {b:2})")
               (text "(:make_struct {a:1} () {b:2})")
               (signals "invalid argument")))
