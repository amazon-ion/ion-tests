// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

(ion_1_1 "make_field can be invoked"
         (each "in text with an unqualified macro name"
               (text " (:make_field foo 0) ")
               "in text with an unqualified macro address"
               (text " (:16 foo 0) ")
               "in text with a qualified macro name"
               (text " (:$ion::make_field foo 0) ")
               "in text using qualified system macro address 22"
               (text " (:$ion::16 foo 0) ")
               "in binary using system macro address 22"
               (binary "EF 10 A3 66 6F 6F 60")
               "in binary with a user macro address"
               (binary "10 A3 66 6F 6F 60")
               (produces {foo: 0} )))

(ion_1_1 "the first argument"
         (then "can be"
               (each "a string"
                     (text ''' (:make_field "foo" 0) ''')
                     "a symbol with known text"
                     (text "(:make_field foo 0)")
                     "an expression that produces text"
                     (text "(:make_field (:values 'foo') 0)")
                     "annotated"
                     (text "(:make_field bar::foo 0)")
                     (produces {foo:0} ))
               (then "a symbol with unknown text"
                     (text "(:make_field $0 1)")
                     // Could be (produces {$0:1} ), but some implementations don't support $0 nicely.
                     (denotes (Struct (0 1)))))
         (then "cannot be"
               (each "null"
                     (text "(:make_field null 0)")
                     "a null symbol"
                     (text "(:make_field null.symbol 0)")
                     "a null string"
                     (text "(:make_field null.string 0)")
                     "a non-text value"
                     (text "(:make_field 123 0)")
                     "empty expression group"
                     (text "(:make_field (::) 0)")
                     "nothing"
                     (text "(:make_field (:none) 0)")
                     (signals "invalid argument"))))

(ion_1_1 "the second argument"
         (then "can be"
               (then "a single value"
                     (text "(:make_field foo 0)")
                     (produces {foo:0} ))
               (then "an expression that produces a single value"
                     (text "(:make_field foo (:values 0))")
                     (produces {foo:0} )))
         (then "cannot be"
               (each "missing"
                     (text "(:make_field foo)")
                     "an empty expression group"
                     (text "(:make_field foo (::))")
                     "an expression that produces no values"
                     (text "(:make_field foo (:none))")
                     "an expression that produces multiple values"
                     (text "(:make_field foo (:values 1 2 3))")
                     "an expression group with multiple values"
                     (text "(:make_field foo (:: 1 2 3))")
                     (signals "invalid argument"))))
