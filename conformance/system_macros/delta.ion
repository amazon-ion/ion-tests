// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

(ion_1_1 "delta can be invoked"
         (each "in text with an unqualified macro name"
               (text "(:delta)")
               "in text with an unqualified macro address"
               (text "(:18)")
               "in text with a qualified macro name"
               (text "(:$ion::delta)")
               "in text with a qualified macro address"
               (text "(:$ion::18)")
               "in binary with a system macro address"
               (binary "EF 12 00")
               "in binary with a user macro address"
               (binary "12 00")
               (produces)))

// the output of delta is defined as follows:
//    output₀ = delta₀
//    outputₙ₊₁ = outputₙ + deltaₙ₊₁
(ion_1_1 "delta produces a stream of values that is the delta of"
         (each "0 arguments"
               (binary "EF 12 00")
               (text "(:delta)")
               (text "(:delta (::))")
               (produces))
         (each "1 argument"
               (binary "EF 12 01 61 01")
               (text "(:delta 1)")
               (produces 1))
         (each "2 arguments"
               (binary "EF 12 02 09 61 01 61 02")
               (text "(:delta 1 2)")
               (produces 1 3))
         (each "3 arguments"
               (binary "EF 12 02 0D 61 FF 61 FF 61 FF")
               (text "(:delta -1 -1 -1)")
               (produces -1 -2 -3))
         (each "4 arguments"
               (binary "EF 12 02 11 61 01 61 01 61 01 61 01")
               (text "(:delta 1 1 1 1)")
               (text "(:delta (:repeat 4 1))")
               (produces 1 2 3 4))
         (each "many arguments"
               (text "(:delta 1 2 3 4 5 -1 -2 -3)")
               // Annotations are silently dropped
               (text "(:delta a::1 b::2 c::3 d::4 e::5 -1 -2 -3)")
               (produces 1 3 6 10 15 14 12 9)))

(ion_1_1 "arguments may not be"
         (each "any null"
               (text "(:delta 1 null 2)")
               (text "(:delta 1 null.int 2)")
               (text "(:delta 1 null.float 2)")
               (text "(:delta 1 null.decimal 2)")
               "a float"
               (text "(:delta 1 3e1 2)")
               "a decimal"
               (text "(:delta 1 3d1 2)")
               "a list of numbers"
               (text "(:delta 1 [3, 4, 5] 2)")
               "a sexp of numbers"
               (text "(:delta 1 (3 4 5) 2)")
               "a numeric string"
               (text "(:delta 1 '''3''' 2)")
               (signals "invalid argument")))

// Demonstrations of some interesting things you can do with delta.

(ion_1_1 "delta and repeat can be combined to generate"
         (mactab $ion_encoding (macro from_x_count_n_by_step (x n step) (.delta (.. (%x) (.repeat (%n) (%step))))))
         (then "an increasing sequence"   (text "(:from_x_count_n_by_step 0 10  1)") (produces 0 1 2 3 4 5 6 7 8 9 10))
         (then "a count-by-twos sequence" (text "(:from_x_count_n_by_step 0 10  2)") (produces 0 2 4 6 8 10 12 14 16 18 20))
         (then "a decreasing sequence"    (text "(:from_x_count_n_by_step 5 10 -1)") (produces 5 4 3 2 1 0 -1 -2 -3 -4 -5)))

(ion_1_1 "it is possible to create a delta of deltas encoding"
         // See, for example
         // https://www.timescale.com/blog/time-series-compression-algorithms-explained/#delta-of-delta-encoding
         (mactab $ion_encoding
                 (macro delta_of_deltas (flex_int::init dod*) (.delta (.. (%init) (.delta (%dod)))))
                 (macro rle (flex_uint::run_length flex_int::value) (.repeat (%run_length) (%value))))
         (text "(:delta_of_deltas 52 (:: -1 (:rle 10 0) 1 (:rle 5 0) 1 (:rle 5 0)))")
         (produces 52 51 50 49 48 47 46 45 44 43 42 41 41 41 41 41 41 41 42 43 44 45 46 47))
