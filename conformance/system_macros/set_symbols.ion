// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

(ion_1_1 "set_symbols can be invoked"
         (each "in text with an unqualified macro name"
               (text ''' (:set_symbols "") ''')
               "in text with an unqualified macro address"
               (text ''' (:19 "") ''')
               "in text with a qualified macro name"
               (text ''' (:$ion::set_symbols "") ''')
               "in text with a qualified macro address 19"
               (text ''' (:$ion::19 "") ''')
               "in binary with a system macro address 19"
               (binary "EF 13 01 90")
               "in binary with a user macro address"
               (binary "13 01 90")
               (then "and produces only system values"
                     (produces))))

(ion_1_1 "set_symbols can accept"
         (symtab "A")
         (then "an empty expression group"
               (text "(:set_symbols (::))")
               (then "with no error and producing no user values"
                     (produces))
               (then "and clears any existing symbols from the default module"
                     (toplevel '#$1')
                     (produces  $ion)))
         (each "a single string"
               (text "(:set_symbols '''a''')")
               "a single symbol"
               (text "(:set_symbols 'a')")
               (then "with no error and producing no user values"
                     (produces))
               (then "and sets the symbol table of the default module"
                     (toplevel '#$1' '#$2')
                     (produces   a    $ion)))
         (each "multiple strings"
               (text ''' (:set_symbols "a" "b" "c") ''')
               "multiple symbols"
               (text ''' (:set_symbols 'a' 'b' 'c') ''')
               "a mix of strings and symbols"
               (text ''' (:set_symbols 'a' "b" 'c') ''')
               (then "with no error and producing no user values"
                     (produces))
               (then "and sets the symbol table of the default module"
                     (toplevel '#$1' '#$2' '#$3' '#$4')
                     (produces   a     b     c    $ion))))

(ion_1_1 "set_symbols does not accept"
         (each "null"
               (text "(:set_symbols null)")
               "null.symbol"
               (text "(:set_symbols null.symbol)")
               "null.string"
               (text "(:set_symbols null.string)")
               "annotated arguments" // because of the symbol table syntax rather than any specific restriction of this macro
               (text "(:set_symbols a::b)")
               "symbols with unknown text and sid >0"
               (text "(:set_symbols $256)")
               (signals "invalid argument")))

(ion_1_1 "set_symbols may not be invoked"
         (each "from TDL"
               (mactab (macro foo () (.set_symbols (..))))
               "in a list"
               (toplevel [('#$:set_symbols')])
               "in a sexp"
               (toplevel (('#$:set_symbols')))
               "in a struct"
               (toplevel { a: ('#$:set_symbols') })
               "as an e-expression argument"
               (toplevel ('#$:values' ('#$:set_symbols') ))
               (signals "set_symbols may only be invoked where system values can occur")))

(ion_1_1 "set_symbols does not have any side-effects on the macro table"
         (text "(:set_macros (macro x () X))")
         (then "[PRECONDITION] macros are set as expected"
               (text "(:x) (:0)")
               (produces X X))
         (each (text "(:$ion::set_symbols)")
               (text "(:$ion::set_symbols 'a')")
               (text "(:$ion::set_symbols 'a' 'b')")
               // TODO: If it's not too difficult, assert that no macros are added
               (then "no macros are removed"
                     (text "(:x) (:0)")
                     (produces X X))))
