// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

(ion_1_1 "make_string can be invoked"
         (each "in text with an unqualified macro name"
               (text " (:make_string (::)) ")
               "in text with an unqualified macro address"
               (text " (:3 (::)) ")
               "in text with a qualified macro name"
               (text " (:$ion::make_string (::)) ")
               "in text using qualified system macro address 3"
               (text " (:$ion::3 (::)) ")
               "in binary using system macro address 3"
               (binary "EF 03 00")
               "in binary with a user macro address"
               (binary "03 00")
               (produces "")))

(ion_1_1 "make_string creates a single, unannotated string from"
         (then "0 values"
               (text ''' (:make_string) ''')
               (produces ""))
         (then "1 string"
               (text ''' (:make_string "a") ''')
               (produces "a"))
         (then "2 strings"
               (text ''' (:make_string "a" "b") ''')
               (produces "ab"))
         (then "3 strings"
               (text ''' (:make_string "a" "b" "c") ''')
               (produces "abc"))
         (then "1 symbol"
               (text ''' (:make_string a) ''')
               (produces "a"))
         (then "2 symbols"
               (text ''' (:make_string a b) ''')
               (produces "ab"))
         (then "3 symbols"
               (text ''' (:make_string a b c) ''')
               (produces "abc"))
         (then "a mix of strings and symbols"
               (text ''' (:make_string a "b" c "d") ''')
               (produces "abcd"))
         (then "an expression that produces multiple text values"
               (text ''' (:make_string (:values a "b" c)) ''')
               (produces "abc"))
         (then "annotated text values"
               // Argument annotations are silently dropped.
               (text ''' (:make_string x::a y::"b" z::c) ''')
               (produces "abc")))

(ion_1_1 "the argument cannot be"
         (each "null"
               (text ''' (:make_string null) ''')
               (text ''' (:make_string "a" null "b") ''')
               "null.string"
               (text ''' (:make_string null.string) ''')
               (text ''' (:make_string "a" null.string "b") ''')
               "null.symbol"
               (text ''' (:make_string null.symbol) ''')
               (text ''' (:make_string "a" null.symbol "b") ''')
               "a non-text value"
               (text ''' (:make_string {{ "abc" }}) ''')
               (text ''' (:make_string 123) ''')
               (text ''' (:make_string ["a", "b", "c"]) ''')
               (text ''' (:make_string "a" {{ "abc" }} "b") ''')
               (text ''' (:make_string "a" 123 "b") ''')
               (text ''' (:make_string "a" ["a", "b", "c"] "b") ''')
               "a symbol with unknown text"
               (text ''' (:make_string $0) ''')
               (text ''' (:make_string "a" $0 "b") ''')
               (text ''' (:make_string $9999999) ''')
               (text ''' (:make_string "a" $9999999 "b") ''')
               (signals "invalid argument")))
