// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

// Testing constant (no-argument) macro invocation from the template language.


// Bare references (no leading colon)
// TODO:[ALIAS] bare refs to alias

(ion_1_1 "Invalid bare reference"
  (then "of undefined name"
    (mactab (macro m () (noSuchMacro)))
    (signals "No such macro: noSuchMacro"))
 (then "cannot self-reference"
   (mactab (macro m () (m)))
   (signals "No such macro: m")))


(ion_1_1 "Malformed macro references"
  (each (mactab (macro _ () (':')))
        (mactab (macro _ () ('::')))
        (mactab (macro _ () (':1:')))
        (mactab (macro _ () (':$ion:')))
        (mactab (macro m () 0)
                (macro _ () ('::m')))
        (mactab (macro m () 0)
                (macro _ () ('m:')))
        (signals "Malformed macro-ref:")))


(ion_1_1 "Invoking constant macros"
  (each (mactab (macro m  ()  1)
                (macro m1 ()  (m 1)))
        (mactab (macro m  ()  1)
                (macro m1 ()  (m 1 2)))
        (mactab (macro m  ()  1)
                (macro m1 ()  (m (;))))
        (signals "Too many arguments"))
  (then (mactab (macro m  ()  1)
                (macro m1 ()  (m)))
        (toplevel ('#$:m1'))
        (produces 1)))


(ion_1_1 "Local macros shadow system macros"
  (mactab (macro values () "local")
          (macro n () (values)))
  (then (toplevel ('#$:$ion:values' "system")) // Precondition for this test
        (produces "system"))
  (then (toplevel ('#$:n'))
        (produces "local")))


(ion_1_1 "Qualified references"
  (then (mactab (macro m (p*) (':$ion:values' 1 p 2))
                (macro n (p*) (':$ion:1'      3 p 4)))
        (toplevel ('#$:m' a b) ('#$:n' c d))
        (produces 1 a b 2      3 c d 4))

  (then "can reference a preceding module"
    (encoding (module M (macro_table (macro m () "m")))
              (module U (macro_table (macro u () [(':M:m'), (':M:0')])))  // No `use` needed!
              (module V (use M)
                        (macro_table (macro v () [(':M:m'), (':M:0')])))  // But it's allowed.
              (macro_table U V))
    (toplevel ('#$:u')   ('#$:v'))
    (produces ["m", "m"] ["m", "m"])))


(ion_1_1 "Local references"
  (then (mactab (macro m () "m")
                (macro n () [(':m'), (':0')]))
        (toplevel ('#$:n'))
        (produces ["m", "m"]))
  (then "cannot self reference by name"
    (mactab (macro m () (':m')))
    (signals "No such macro declared in this module: :m"))
  (then "cannot self reference by name"
    (mactab (macro m () (':0')))
    (signals "Invalid macro address: :0"))
  (then "cannot forward reference by name"
    (mactab (macro m () (':n'))
            (macro n () "n"))
    (signals "No such macro declared in this module: :n"))
  (then "cannot forward reference by address"
    (mactab (macro m () (':2'))
            (macro n () "n")
            (macro o () "o"))
    (signals "Invalid macro address: :2"))
  (then "cannot reference system macros"
    (mactab (macro _ () (':values')))
    (signals "No such macro declared in this module: :values"))
  (then "cannot reference `use`d names"
    (encoding (module M1 (macro_table (macro m () "M1")))
              (module M2 (use M1)
                         (macro_table (macro _ () (':m')))))
    (signals "No such macro declared in this module: :m")))


(ion_1_1 "Local names shadow `use`d names"
  (encoding
    (module M0
      (macro_table (macro shadow () "M0")))
    (module M1
      (use M0)
      (macro_table (macro m0     () (shadow))
                   (macro shadow () "M1")
                   (macro m1     () (shadow))))
    (macro_table M0 M1))
  (toplevel ('#$:m0') ('#$:m1'))
  (produces     "M0"      "M1"))


(ion_1_1 "Ambiguous references are compile-time errors"
  (encoding
      (module M0
        (macro_table (macro ambig () "M0")))
      (module M1
        (macro_table (macro ambig () "M1")))
      (module M2
        (use M0 M1)
        (macro_table (macro m     () (ambig)))))
  (signals "Ambiguous macro-ref: ambig"))
