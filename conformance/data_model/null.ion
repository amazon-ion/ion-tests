// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

(ion_1_x "null values in text"
         (then (text "null"          ) (denotes (Null          )))
         (then (text "null.null"     ) (denotes (Null          )))
         (then (text "null.blob"     ) (denotes (Null blob     )))
         (then (text "null.bool"     ) (denotes (Null bool     )))
         (then (text "null.clob"     ) (denotes (Null clob     )))
         (then (text "null.decimal"  ) (denotes (Null decimal  )))
         (then (text "null.float"    ) (denotes (Null float    )))
         (then (text "null.int"      ) (denotes (Null int      )))
         (then (text "null.list"     ) (denotes (Null list     )))
         (then (text "null.sexp"     ) (denotes (Null sexp     )))
         (then (text "null.string"   ) (denotes (Null string   )))
         (then (text "null.struct"   ) (denotes (Null struct   )))
         (then (text "null.symbol"   ) (denotes (Null symbol   )))
         (then (text "null.timestamp") (denotes (Null timestamp))))

(ion_1_x "malformed nulls in text should signal an error"
         (each (text "null.")
               (text "null.1")
               (text "null.ion")
               (text "null.array")
               (signals "invalid type")))

(ion_1_x "in text, typed null suffix parsing has precedence over sexp operator rules"
         (each (text "(null.)")
               (text "(null.-)")
               (text "(null..)")
               (text "(null.true)")
               (text "(null.1)")
               (text "(null.nan)")
               (text "(null.+inf)")
               (text "(null.foo)")
               (text "(null.[])")
               (text "(null.())")
               (text "(null.{})")
               (signals "invalid type")))

(ion_1_0 "null values in Ion 1.0 binary"
         (then (binary 0x0F) (denotes (Null          )))
         (then (binary 0x1F) (denotes (Null bool     )))
         (then (binary 0x2F) (denotes (Null int      )))
         (then (binary 0x3F) (denotes (Null int      )))
         (then (binary 0x4F) (denotes (Null float    )))
         (then (binary 0x5F) (denotes (Null decimal  )))
         (then (binary 0x6F) (denotes (Null timestamp)))
         (then (binary 0x7F) (denotes (Null symbol   )))
         (then (binary 0x8F) (denotes (Null string   )))
         (then (binary 0x9F) (denotes (Null clob     )))
         (then (binary 0xAF) (denotes (Null blob     )))
         (then (binary 0xBF) (denotes (Null list     )))
         (then (binary 0xCF) (denotes (Null sexp     )))
         (then (binary 0xDF) (denotes (Null struct   ))))

(ion_1_1 "null values in Ion 1.1 binary"
         (then (binary 0xEA)      (denotes (Null          )))
         (then (binary 0xEB 0x00) (denotes (Null bool     )))
         (then (binary 0xEB 0x01) (denotes (Null int      )))
         (then (binary 0xEB 0x02) (denotes (Null float    )))
         (then (binary 0xEB 0x03) (denotes (Null decimal  )))
         (then (binary 0xEB 0x04) (denotes (Null timestamp)))
         (then (binary 0xEB 0x05) (denotes (Null string   )))
         (then (binary 0xEB 0x06) (denotes (Null symbol   )))
         (then (binary 0xEB 0x07) (denotes (Null blob     )))
         (then (binary 0xEB 0x08) (denotes (Null clob     )))
         (then (binary 0xEB 0x09) (denotes (Null list     )))
         (then (binary 0xEB 0x0A) (denotes (Null sexp     )))
         (then (binary 0xEB 0x0B) (denotes (Null struct   ))))

(ion_1_x "Null denotations"
         (then (toplevel null.blob     ) (denotes (Null blob     )))
         (then (toplevel null.bool     ) (denotes (Null bool     )))
         (then (toplevel null.clob     ) (denotes (Null clob     )))
         (then (toplevel null.decimal  ) (denotes (Null decimal  )))
         (then (toplevel null.float    ) (denotes (Null float    )))
         (then (toplevel null.int      ) (denotes (Null int      )))
         (then (toplevel null.list     ) (denotes (Null list     )))
         (then (toplevel null.null     ) (denotes (Null          )))
         (then (toplevel null.sexp     ) (denotes (Null sexp     )))
         (then (toplevel null.string   ) (denotes (Null string   )))
         (then (toplevel null.struct   ) (denotes (Null struct   )))
         (then (toplevel null.symbol   ) (denotes (Null symbol   )))
         (then (toplevel null.timestamp) (denotes (Null timestamp))))
